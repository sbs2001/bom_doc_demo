<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> – reference</title>
    <link>/tags/reference/</link>
    <description>Recent content in reference on </description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 27 Jun 2022 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/tags/reference/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>CLI Reference: CLI Reference</title>
      <link>/cli-reference/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/</guid>
      <description>
        
        
        
      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom document</title>
      <link>/cli-reference/bom_document/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_document/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-document&#34;&gt;bom document&lt;/h2&gt;
&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -h, --help   help for document
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom.md&#34;&gt;bom&lt;/a&gt;	 - A tool for working with SPDX manifests&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;bom_document_outline.md&#34;&gt;bom document outline&lt;/a&gt;	 - bom document outline → Draw structure of a SPDX document&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;bom_document_query.md&#34;&gt;bom document query&lt;/a&gt;	 - bom document query → Search for information in an SBOM&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom document outline</title>
      <link>/cli-reference/bom_document_outline/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_document_outline/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-document-outline&#34;&gt;bom document outline&lt;/h2&gt;
&lt;p&gt;bom document outline → Draw structure of a SPDX document&lt;/p&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;bom document outline → Draw structure of a SPDX document&amp;quot;,&lt;/p&gt;
&lt;p&gt;This subcommand draws a tree-like outline to help the user visualize
the structure of the bom. Even when an SBOM represents a graph structure,
drawing a tree helps a lot to understand what is contained in the document.&lt;/p&gt;
&lt;p&gt;You can define a level of depth to limit the expansion of the entities.
For example set &amp;ndash;depth=1 to only visualize only the files and packages
attached directly to the root of the document.&lt;/p&gt;
&lt;p&gt;bom will try to add useful information to the oultine but, if needed, you can
set the &amp;ndash;spdx-ids to only output the IDs of the entities.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bom document outline SPDX_FILE [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -d, --depth int   recursion level (default -1)
  -h, --help        help for outline
      --spdx-ids    use SPDX identifiers in tree nodes instead of names
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom_document.md&#34;&gt;bom document&lt;/a&gt;	 - bom document → Work with SPDX documents&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom document query</title>
      <link>/cli-reference/bom_document_query/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_document_query/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-document-query&#34;&gt;bom document query&lt;/h2&gt;
&lt;p&gt;bom document query → Search for information in an SBOM&lt;/p&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;bom document query → Search for information in an SBOM&lt;/p&gt;
&lt;p&gt;The query subcommand creates a way to extract information
from an SBOM. It exposes a simple search language to filter
elements in the sbom that match a certain criteria.&lt;/p&gt;
&lt;p&gt;The query interface allows the number of filters to grow
over time. The following filters are available:&lt;/p&gt;
&lt;p&gt;depth:N       The depth filter will match elements
reachable at N levels from the document root.&lt;/p&gt;
&lt;p&gt;name:pattern  Matches all elements in the document that
contain &lt;pattern&gt; in their name.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;h1 id=&#34;match-all-second-level-elements-with-log4j-in-their-name&#34;&gt;Match all second level elements with log4j in their name:&lt;/h1&gt;
&lt;p&gt;bom document query sbom.spdx &amp;ldquo;depth:2 name:log4j&amp;rdquo;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bom document query SPDX_FILE &amp;#34;query expression&amp;#34;  [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -h, --help   help for query
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom_document.md&#34;&gt;bom document&lt;/a&gt;	 - bom document → Work with SPDX documents&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom generate</title>
      <link>/cli-reference/bom_generate/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_generate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-generate&#34;&gt;bom generate&lt;/h2&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;bom generate → Create SPDX SBOMs&lt;/p&gt;
&lt;p&gt;generate is the bom subcommand to generate SPDX manifests.&lt;/p&gt;
&lt;p&gt;Currently supports creating SBOM from files, images, and docker
archives (images in tarballs). It supports pulling images from
remote registries for analysis.&lt;/p&gt;
&lt;p&gt;bom can take a deeper look into images using a growing number
of analyzers designed to add more sense to common base images.&lt;/p&gt;
&lt;p&gt;The SBOM data can also be exported to an in-toto provenance
attestation. The output will produce a provenance statement listing all
the SPDX data as in-toto subjects, but otherwise ready to be
completed by a later stage in your CI/CD pipeline. See the
&amp;ndash;provenance flag for more details.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bom generate [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -a, --analyze-images          go deeper into images using the available analyzers
      --archive strings         list of archives to add as packages (supports tar, tar.gz)
  -c, --config string           path to yaml SBOM configuration file
  -d, --dirs strings            list of directories to include in the manifest as packages
  -f, --file strings            list of files to include
      --format string           format of the document (supports tag-value, json) (default &amp;#34;tag-value&amp;#34;)
  -h, --help                    help for generate
      --ignore strings          list of regexp patterns to ignore when scanning directories
  -i, --image strings           list of images
      --image-archive strings   list of docker archive tarballs to include in the manifest
  -l, --license string          SPDX license identifier to declare in the SBOM
      --name string             name for the document, in contrast to URLs, intended for humans
  -n, --namespace string        an URI that servers as namespace for the SPDX doc
      --no-gitignore            don&amp;#39;t use exclusions from .gitignore files
      --no-gomod                don&amp;#39;t perform go.mod analysis, sbom will not include data about go packages
      --no-transient            don&amp;#39;t include transient go dependencies, only direct deps from go.mod
  -o, --output string           path to the file where the document will be written (defaults to STDOUT)
      --provenance string       path to export the SBOM as an in-toto provenance statement
      --scan-images             scan container images to look for OS information (currently debian only) (default true)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom.md&#34;&gt;bom&lt;/a&gt;	 - A tool for working with SPDX manifests&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom generate</title>
      <link>/cli-reference/bom_version/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_version/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-version&#34;&gt;bom version&lt;/h2&gt;
&lt;p&gt;Prints the version&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bom version [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -h, --help   help for version
      --json   print JSON instead of text
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom.md&#34;&gt;bom&lt;/a&gt;	 - A tool for working with SPDX manifests&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>CLI Reference: bom validate</title>
      <link>/cli-reference/bom_validate/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/cli-reference/bom_validate/</guid>
      <description>
        
        
        &lt;h2 id=&#34;bom-validate&#34;&gt;bom validate&lt;/h2&gt;
&lt;h3 id=&#34;synopsis&#34;&gt;Synopsis&lt;/h3&gt;
&lt;p&gt;bom validate → Check artifacts against an sbom&lt;/p&gt;
&lt;p&gt;validate is the bom subcommand to check artifacts against SPDX
manifests.&lt;/p&gt;
&lt;p&gt;This is an experimental command. The first iteration has support
for checking files.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;bom validate [flags]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options&#34;&gt;Options&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  -e, --exit-code       when true, bom will exit with exit code 1 if invalid artifacts are found
  -f, --files strings   list of files to verify
  -h, --help            help for validate
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;options-inherited-from-parent-commands&#34;&gt;Options inherited from parent commands&lt;/h3&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      --log-level string   the logging verbosity, either &amp;#39;panic&amp;#39;, &amp;#39;fatal&amp;#39;, &amp;#39;error&amp;#39;, &amp;#39;warning&amp;#39;, &amp;#39;info&amp;#39;, &amp;#39;debug&amp;#39;, &amp;#39;trace&amp;#39; (default &amp;#34;info&amp;#34;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;see-also&#34;&gt;SEE ALSO&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;bom.md&#34;&gt;bom&lt;/a&gt;	 - A tool for working with SPDX manifests&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id=&#34;auto-generated-by-spf13cobra-on-27-jun-2022&#34;&gt;Auto generated by spf13/cobra on 27-Jun-2022&lt;/h6&gt;

      </description>
    </item>
    
    <item>
      <title>Tutorials: Configuring BOM via YAML</title>
      <link>/tutorials/using_yaml_config/</link>
      <pubDate>Mon, 27 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>/tutorials/using_yaml_config/</guid>
      <description>
        
        
        &lt;h2 id=&#34;usage&#34;&gt;Usage:&lt;/h2&gt;
&lt;p&gt;bom can be configured via a YAML file. The usage is as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bom generate -c path/to/yaml/config
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;config&#34;&gt;Config:&lt;/h2&gt;
&lt;p&gt;The YAML config looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;namespace&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;https://example.com/ &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# an URI that serves as namespace for the SPDX doc&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;license&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Apache-2.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SPDX license identifier to declare in the SBOM&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ExampleBOM &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#name for the document, in contrast to URLs, intended for humans&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;creator&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;person&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Author Name (email@example.com)&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;tool&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;bom &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;artifacts&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Valid choices are &amp;#34;directory&amp;#34; or &amp;#34;file&amp;#34; or &amp;#34;image&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;./bom&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Path to container in registry if type is &amp;#34;image&amp;#34; else path to directory or file&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;license&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Apache-2.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SPDX identifier of the license&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;gomodules&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Boolean. Set it to true if this artifact is a gomodule.&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Valid choices are &amp;#34;directory&amp;#34; or &amp;#34;file&amp;#34; or &amp;#34;image&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ghcr.io/myorg/myrepo/myimage:tag&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Path to container in registry if type is &amp;#34;image&amp;#34; else path to directory or file&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;license&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Apache-2.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SPDX identifier of the license&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;- &lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Valid choices are &amp;#34;directory&amp;#34; or &amp;#34;file&amp;#34; or &amp;#34;image&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;source&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;./demo.py&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Path to container in registry if type is &amp;#34;image&amp;#34; else path to directory or file&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;license&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Apache-2.0&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# SPDX identifier of the license&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;namespace&#34;&gt;&lt;code&gt;namespace&lt;/code&gt;:&lt;/h3&gt;
&lt;p&gt;A URI that serves as namespace for the SPDX doc. This is used as value for &lt;code&gt;DocumentNamespace&lt;/code&gt; in the generated SPDX BOM.&lt;/p&gt;
&lt;h3 id=&#34;license&#34;&gt;&lt;code&gt;license&lt;/code&gt;:&lt;/h3&gt;
&lt;p&gt;This is a SPDX license identifier. It&amp;rsquo;s top level for the whole generated SBOM.&lt;/p&gt;
&lt;h3 id=&#34;name&#34;&gt;&lt;code&gt;name&lt;/code&gt;:&lt;/h3&gt;
&lt;p&gt;Name of the generated BOM. Intended for humans.&lt;/p&gt;
&lt;h3 id=&#34;creator-&#34;&gt;&lt;code&gt;creator&lt;/code&gt; :&lt;/h3&gt;
&lt;p&gt;Information about BOM creator.&lt;/p&gt;
&lt;h4 id=&#34;person-&#34;&gt;&lt;code&gt;person&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;Name of person who created the BOM.&lt;/p&gt;
&lt;h4 id=&#34;tool-&#34;&gt;&lt;code&gt;tool&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;Tool used for creating the BOM.&lt;/p&gt;
&lt;h3 id=&#34;artifacts-&#34;&gt;&lt;code&gt;artifacts&lt;/code&gt; :&lt;/h3&gt;
&lt;h4 id=&#34;type-&#34;&gt;&lt;code&gt;type&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;Type of artifact. Can be either &amp;ldquo;image&amp;rdquo; or &amp;ldquo;file&amp;rdquo; or &amp;ldquo;directory&amp;rdquo; .&lt;/p&gt;
&lt;h4 id=&#34;source-&#34;&gt;&lt;code&gt;source&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;Path to artifact.&lt;/p&gt;
&lt;p&gt;If artifact type is file, then &lt;code&gt;source&lt;/code&gt; should be a path to the file.&lt;/p&gt;
&lt;p&gt;If artifact type is directory, then &lt;code&gt;source&lt;/code&gt; should be a path to the directory.&lt;/p&gt;
&lt;p&gt;If artifact type is image, then &lt;code&gt;source&lt;/code&gt; should be a path to the URI of image in container registry.&lt;/p&gt;
&lt;h4 id=&#34;license-&#34;&gt;&lt;code&gt;license&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;Top level SPDX identifier of this artifact.&lt;/p&gt;
&lt;h4 id=&#34;gomodules-&#34;&gt;&lt;code&gt;gomodules&lt;/code&gt; :&lt;/h4&gt;
&lt;p&gt;This is a boolean. If set to true, then bom will assume the artifact to be a go module. The dependencies will also be scanned.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
